import math

def rad2deg(rad):
    return rad*180/math.pi

def deg2rad(deg):
    return deg*math.pi/180


H_scaling = [(1.0, 1.0), (0.975, 0.989), (0.951, 0.978), (0.928, 0.968),
(0.907, 0.958), (0.887, 0.948), (0.869, 0.94), (0.851, 0.931),
(0.834, 0.923), (0.818, 0.916), (0.803, 0.909), (0.789, 0.902),
 (0.775, 0.895), (0.762, 0.889), (0.75, 0.884), (0.738, 0.878),
 (0.727, 0.873), (0.717, 0.869), (0.707, 0.864), (0.697, 0.86),
  (0.688, 0.856), (0.68, 0.853), (0.672, 0.85), (0.664, 0.847),
   (0.656, 0.844), (0.649, 0.842), (0.643, 0.84), (0.636, 0.838),
    (0.63, 0.836), (0.624, 0.835), (0.619, 0.834), (0.614, 0.833),
     (0.609, 0.832), (0.604, 0.832), (0.6, 0.832), (0.595, 0.832),
     (0.591, 0.833), (0.588, 0.833), (0.584, 0.834), (0.581, 0.836),
      (0.578, 0.837), (0.575, 0.839), (0.572, 0.841), (0.57, 0.843),
       (0.568, 0.846), (0.566, 0.849), (0.564, 0.852), (0.562, 0.855),
        (0.561, 0.859), (0.559, 0.863), (0.558, 0.867), (0.557, 0.872),
         (0.556, 0.876), (0.556, 0.882), (0.555, 0.887), (0.555, 0.893),
          (0.555, 0.899), (0.555, 0.906), (0.555, 0.913), (0.555, 0.92),
           (0.556, 0.928), (0.557, 0.936), (0.557, 0.945), (0.559, 0.954),
            (0.56, 0.964), (0.561, 0.974), (0.563, 0.984), (0.564, 0.996),
             (0.566, 1.007), (0.569, 1.02), (0.571, 1.033), (0.573, 1.046),
              (0.576, 1.06), (0.579, 1.075), (0.582, 1.091), (0.586, 1.108),
               (0.589, 1.125), (0.593, 1.143), (0.597, 1.163), (0.601, 1.183),
               (0.606, 1.205), (0.611, 1.227), (0.616, 1.251), (0.621, 1.276),
               (0.626, 1.303), (0.632, 1.331), (0.639, 1.361), (0.645, 1.393),
                (0.652, 1.426), (0.659, 1.462), (0.667, 1.5)]


def calculate_theta(center_h, center_arrow):
    # yaw defined as positive right of line between H and arrow.
    x_h, y_h = center_h
    x_a, y_a = center_arrow
    theta = math.atan2(y_a-y_h, x_a-x_h)
    theta -= math.pi/2
    theta *= -1
    return theta

def estimate_H_from_bb_and_rotation(bb, theta):
    theta = rad2deg(theta)
    theta = int(round(theta,0))
    theta = theta%180
    print(theta)
    scale_factors = H_scaling[theta]
    w, h = bb
    w *= scale_factors[0]
    h *= scale_factors[1]
    w = round(w,2)
    h = round(h,2)
    return (w,h)


print(estimate_H_from_bb_and_rotation((3,1), deg2rad(90)))

for i in range(0,46,5):
    print(f'{i} & {H_scaling[i]} & {i+45} & {H_scaling[i+45]}\\\\')
